import telebot
from telebot import types
import config
import os
from datetime import datetime
import threading
import time

bot = telebot.TeleBot(config.BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
def init_files():
    if not os.path.exists('schedule.txt'):
        with open('schedule.txt', 'w', encoding='utf-8') as f:
            f.write("""1. "–†–æ–º–µ–æ –∏ –î–∂—É–ª—å–µ—Ç—Ç–∞" - 15 –∏—é–Ω—è, 19:00 - https://example.com/tickets/1
2. "–ì–∞–º–ª–µ—Ç" - 16 –∏—é–Ω—è, 18:30 - https://example.com/tickets/2
3. "–©–µ–ª–∫—É–Ω—á–∏–∫" - 17 –∏—é–Ω—è, 20:00 - https://example.com/tickets/3""")

    if not os.path.exists('news.txt'):
        with open('news.txt', 'w', encoding='utf-8') as f:
            f.write("""1. –ù–æ–≤–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ "–†–æ–º–µ–æ –∏ –î–∂—É–ª—å–µ—Ç—Ç–∞" - –ø—Ä–µ–º—å–µ—Ä–∞ 15 –∏—é–Ω—è!
2. –°–∫–∏–¥–∫–∏ –Ω–∞ –±–∏–ª–µ—Ç—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ - 20% –ø—Ä–∏ –ø—Ä–µ–¥—ä—è–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ.
3. –ù–∞—à —Ç–µ–∞—Ç—Ä –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–º–∏—é "–ó–æ–ª–æ—Ç–∞—è –º–∞—Å–∫–∞"!""")

    if not os.path.exists('subscribers.txt'):
        with open('subscribers.txt', 'w') as f:
            f.write("")

# –ß—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
def get_schedule():
    with open('schedule.txt', 'r', encoding='utf-8') as f:
        return f.read()

def get_news():
    with open('news.txt', 'r', encoding='utf-8') as f:
        return f.read()

def get_subscribers():
    with open('subscribers.txt', 'r') as f:
        return [int(line.strip()) for line in f if line.strip()]

def add_subscriber(user_id):
    subscribers = get_subscribers()
    if user_id not in subscribers:
        with open('subscribers.txt', 'a') as f:
            f.write(f"{user_id}\n")

def remove_subscriber(user_id):
    subscribers = get_subscribers()
    if user_id in subscribers:
        subscribers.remove(user_id)
        with open('subscribers.txt', 'w') as f:
            for sub in subscribers:
                f.write(f"{sub}\n")

# –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def send_notification(message_text):
    subscribers = get_subscribers()
    for user_id in subscribers:
        try:
            bot.send_message(user_id, "üîî –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n\n" + message_text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user_id}: {e}")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
def log_action(user_id, action):
    with open('admin_log.txt', 'a', encoding='utf-8') as f:
        f.write(f"{datetime.now()}: User {user_id} {action}\n")

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ø–µ–∫—Ç–∞–∫–ª–µ–π")
    btn2 = types.KeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏ —Ç–µ–∞—Ç—Ä–∞")
    btn3 = types.KeyboardButton("üé≠ –û —Ç–µ–∞—Ç—Ä–µ")
    btn4 = types.KeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    btn5 = types.KeyboardButton("üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    markup.add(btn1, btn2, btn3, btn4, btn5)
    
    welcome_text = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–π –±–æ—Ç! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
- –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ø–µ–∫—Ç–∞–∫–ª–µ–π
- –ß–∏—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ–∞—Ç—Ä–∞
- –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö

–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"""
    
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    if message.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ø–µ–∫—Ç–∞–∫–ª–µ–π":
        schedule = get_schedule()
        bot.send_message(message.chat.id, f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ø–µ–∫—Ç–∞–∫–ª–µ–π:\n\n{schedule}")
        
    elif message.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏ —Ç–µ–∞—Ç—Ä–∞":
        news = get_news()
        bot.send_message(message.chat.id, f"üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n{news}")
        
    elif message.text == "üé≠ –û —Ç–µ–∞—Ç—Ä–µ":
        about_text = """üé≠ –ù–∞—à —Ç–µ–∞—Ç—Ä - –æ–¥–∏–Ω –∏–∑ —Å—Ç–∞—Ä–µ–π—à–∏—Ö –≤ –≥–æ—Ä–æ–¥–µ, –æ—Å–Ω–æ–≤–∞–Ω –≤ 1890 –≥–æ–¥—É.

–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:
- –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
- –î–µ—Ç—Å–∫–∏–µ —Å–ø–µ–∫—Ç–∞–∫–ª–∏
- –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã

–ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è, 1
–¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67"""
        bot.send_message(message.chat.id, about_text)
    
    elif message.text == "üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
        add_subscriber(message.chat.id)
        bot.send_message(message.chat.id, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–ø–µ–∫—Ç–∞–∫–ª—è—Ö –∏ –Ω–æ–≤–æ—Å—Ç—è—Ö!")
    
    elif message.text == "üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π":
        remove_subscriber(message.chat.id)
        bot.send_message(message.chat.id, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    
    # –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
    elif message.from_user.id == config.ADMIN_ID and message.text == "/admin":
        admin_panel(message)
    
    elif message.from_user.id == config.ADMIN_ID and message.text.startswith("/notify"):
        notification_text = message.text.replace("/notify", "").strip()
        if notification_text:
            send_notification(notification_text)
            bot.send_message(message.chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º!")
        else:
            bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /notify —Ç–µ–∫—Å—Ç_—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
def admin_panel(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("/update_schedule")
    btn2 = types.KeyboardButton("/update_news")
    btn3 = types.KeyboardButton("/send_notification")
    btn4 = types.KeyboardButton("/stats")
    btn5 = types.KeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(btn1, btn2, btn3, btn4, btn5)
    
    bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.from_user.id == config.ADMIN_ID and message.text == "/update_schedule")
def request_schedule_update(message):
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
    bot.register_next_step_handler(msg, update_schedule)

def update_schedule(message):
    with open('schedule.txt', 'w', encoding='utf-8') as f:
        f.write(message.text)
    bot.send_message(message.chat.id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    log_action(message.from_user.id, "updated schedule")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    send_notification("–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ø–µ–∫—Ç–∞–∫–ª–µ–π! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞—Ç—ã –≤ –±–æ—Ç–µ.")

@bot.message_handler(func=lambda message: message.from_user.id == config.ADMIN_ID and message.text == "/update_news")
def request_news_update(message):
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:")
    bot.register_next_step_handler(msg, update_news)

def update_news(message):
    with open('news.txt', 'w', encoding='utf-8') as f:
        f.write(message.text)
    bot.send_message(message.chat.id, "–ù–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    log_action(message.from_user.id, "updated news")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö
    send_notification("–ü–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ–∞—Ç—Ä–∞! –ß–∏—Ç–∞–π—Ç–µ –≤ –±–æ—Ç–µ.")

@bot.message_handler(func=lambda message: message.from_user.id == config.ADMIN_ID and message.text == "/stats")
def show_stats(message):
    subscribers = get_subscribers()
    bot.send_message(message.chat.id, f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π (–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
def check_for_updates():
    last_news_count = 0
    last_schedule_count = 0
    
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏
            current_news_count = len(get_news().split('\n'))
            if current_news_count > last_news_count and last_news_count > 0:
                send_notification("–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ–∞—Ç—Ä–∞!")
            last_news_count = current_news_count
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            current_schedule_count = len(get_schedule().split('\n'))
            if current_schedule_count > last_schedule_count and last_schedule_count > 0:
                send_notification("–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–ø–µ–∫—Ç–∞–∫–ª–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!")
            last_schedule_count = current_schedule_count
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        
        time.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    init_files()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    update_thread = threading.Thread(target=check_for_updates)
    update_thread.daemon = True
    update_thread.start()
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)